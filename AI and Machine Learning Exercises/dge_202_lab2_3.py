# -*- coding: utf-8 -*-
"""DGE-202_LAB2.3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1adYEXxo5V7bEcZy9uXQCZor6Gy8JlXIG

Matrix Multiplication in Python
"""

# Juntorn Thiantanukij
# Lab Part 2

import numpy as np
A = np.array([[1, 2, 3], [3, 2, 1]])
B = np.array([[0, 2], [1, -1], [0, 1]])

print("Use the method matmul(A, B)")
print("AB")
print(np.matmul(A, B))
print("BA")
print(np.matmul(B, A))

print("\nUse the operator A @ B")
print("AB")
print(A @ B)
print("BA")
print(B @ A)

"""Solving System of Linear Equation

2x + 3y + 5 = 1, 4x - 2y - 7z = 2, 9x + 5y - 3z = 2


"""

# define matrix A and B
A = np.array([[2, 3, 5], [4, -2, -7], [9, 5, -3]])
B = np.array([[1], [2], [2]])

# Find inverse of A
invA = np.linalg.inv(A)

# Solve the Equation
x = np.matmul(invA, B)

print("Result")
print(x)

"""Linear Algebra on n-dimensional arrays"""

from scipy import misc
from numpy import linalg
import matplotlib.pyplot as plt

img = misc.face()
plt.imshow(img)

print("Shape of the Array")
print(img.shape)
print("Dimension of the Array")
print(img.ndim)
print("Size of the Array")
print(img.size)

"""Linear Algebra Operations"""

img_array = img / 255

red_array = img_array [:, :, 0]
green_array = img_array[:,:, 1]
blue_array = img_array[:, :, 2]

img_gray = img_array @ [0.2126, 0.7152, 0.0722]
plt.subplot(1,3,1)
plt.imshow(red_array, cmap="gray")
plt.subplot(1,3,2)
plt.imshow(green_array, cmap="gray")
plt.subplot(1,3,3)
plt.imshow(blue_array, cmap="gray")

"""Singular Value Decomposition (SVD)

A = U * Sigma * Vtranspose
"""

U, sigma, Vtranspose = linalg.svd(img_gray)
print(U.shape, sigma.shape, Vtranspose.shape)

plt.plot(sigma)

Sigma = np.zeros((768, 1024))
for i in range(768):
  Sigma[i, i] = sigma[i]

img_recon = U @ Sigma @ Vtranspose

plt.imshow(img_recon, cmap="gray")

print("Compare the result")
print(np.linalg.norm(img_gray - img_recon))

"""Compress the Image"""

k = 400

img_comp = U @ Sigma[:, :k] @ Vtranspose[:k, :]

original_shape = img_gray.shape

compression_ratio = 1 - (Sigma[:, :k].shape[0] * Sigma[:, :k].shape[1]) / (Sigma.shape[0] * Sigma.shape[0])

print("Compress the Result")
print(np.linalg.norm(img_gray - img_comp))

print("Compression ratio")
print(compression_ratio)

plt.imshow(img_comp, cmap="gray")